"use client"

import { useState, useEffect } from "react"
import { Activity, BarChart3, ChevronDown, Filter, LineChart, PieChart, Waves, AlertTriangle, Thermometer, Building2 } from 'lucide-react'

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { DateRangePicker } from "@/components/date-range-picker"
import { LocationSelector } from "@/components/location-selector"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import {
  AreaChart,
  Area,
  BarChart,
  Bar,
  LineChart as RechartsLineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  PieChart as RechartsPieChart,
  Pie,
  Cell,
  Legend,
} from "@/components/ui/chart"
import { useBranches } from "@/hooks/use-branches"
import { addDays, format, subDays } from "date-fns"
import { es } from "date-fns/locale"
import { WaterQualityOverview } from "@/components/water-quality-overview"
import { BranchStatusChart } from "@/components/branch-status-chart"

// Define parameter type
interface Parameter {
  id: string
  name: string
  unit: string
  color: string
}

// Define date range type
interface DateRange {
  from: Date
  to: Date
}

export default function AnalyticsPage() {
  const { branches, loading } = useBranches()
  const [selectedParameter, setSelectedParameter] = useState("temperatura")
  const [selectedBranch, setSelectedBranch] = useState<string | null>(null)
  const [selectedFacility, setSelectedFacility] = useState<string | null>(null)
  const [dateRange, setDateRange] = useState<DateRange>({
    from: subDays(new Date(), 30),
    to: new Date(),
  })
  const [parameters, setParameters] = useState<Parameter[]>([])
  const [trendData, setTrendData] = useState<any[]>([])
  const [anomalyData, setAnomalyData] = useState<any[]>([])
  const [distributionData, setDistributionData] = useState<any[]>([])

  // Initialize parameters
  useEffect(() => {
    const paramList: Parameter[] = [
      { id: "temperatura", name: "Temperatura", unit: "°C", color: "#f44336" },
      { id: "oxigeno", name: "Oxígeno Disuelto", unit: "mg/L", color: "#2196f3" },
      { id: "ph", name: "pH", unit: "", color: "#9c27b0" },
      { id: "turbidez", name: "Turbidez", unit: "NTU", color: "#ff9800" },
      { id: "salinidad", name: "Salinidad", unit: "ppt", color: "#4caf50" },
      { id: "nitrates", name: "Nitratos", unit: "mg/L", color: "#3f51b5" },
      { id: "ammonia", name: "Amonio", unit: "mg/L", color: "#795548" },
    ]
    setParameters(paramList)
  }, [])

  // Generate trend data based on selected parameters and date range
  useEffect(() => {
    if (loading || !dateRange.from || !dateRange.to) return

    // Generate dates between from and to
    const dates: Date[] = []
    let currentDate = new Date(dateRange.from)
    while (currentDate <= dateRange.to) {
      dates.push(new Date(currentDate))
      currentDate = addDays(currentDate, 1)
    }

    // Generate trend data
    const newTrendData = dates.map((date) => {
      // Base values for each parameter
      const baseValues = {
        temperatura: 24 + Math.random() * 2,
        oxigeno: 7 + Math.random() * 0.5,
        ph: 7 + Math.random() * 0.5,
        turbidez: 3 + Math.random() * 1,
        salinidad: 10 + Math.random() * 3,
        nitrates: 4 + Math.random() * 1,
        ammonia: 0.5 + Math.random() * 0.5,
      }

      // Add some variation based on selected branch/facility
      if (selectedBranch) {
        const branch = branches.find((b) => b.id === selectedBranch)
        if (branch && branch.facilities.length > 0) {
          const facility = selectedFacility
            ? branch.facilities.find((f) => f.id === selectedFacility)
            : branch.facilities[0]

          if (facility && facility.waterQuality) {
            // Adjust base values based on actual facility data
            Object.entries(facility.waterQuality).forEach(([key, config]) => {
              if (key in baseValues) {
                baseValues[key as keyof typeof baseValues] = config.value + (Math.random() * 0.4 - 0.2) * config.value
              }
            })
          }
        }
      }

      return {
        date: format(date, "dd/MM", { locale: es }),
        ...baseValues,
      }
    })

    setTrendData(newTrendData)

    // Generate anomaly data
    const selectedParamData = parameters.find((p) => p.id === selectedParameter)
    if (selectedParamData) {
      const baseValue = selectedParameter === "temperatura" ? 24 : selectedParameter === "oxigeno" ? 7 : 7
      const threshold = selectedParameter === "temperatura" ? 26 : selectedParameter === "oxigeno" ? 5.5 : 8

      const newAnomalyData = dates.map((date, index) => {
        // Create some anomalies in the middle of the date range
        const isMiddle = index > dates.length / 3 && index < (2 * dates.length) / 3
        const anomalyChance = isMiddle ? 0.3 : 0.05
        const isAnomaly = Math.random() < anomalyChance

        let value
        if (isAnomaly) {
          // Generate value outside threshold
          value = threshold + Math.random() * 2
        } else {
          // Generate normal value
          value = baseValue + (Math.random() * 1.5 - 0.75)
        }

        return {
          date: format(date, "dd/MM", { locale: es }),
          value,
          threshold,
          anomaly: isAnomaly,
        }
      })

      setAnomalyData(newAnomalyData)
    }

    // Generate distribution data
    setDistributionData([
      { name: "Óptimo", value: 68, color: "#4caf50" },
      { name: "Aceptable", value: 25, color: "#ff9800" },
      { name: "Crítico", value: 7, color: "#f44336" },
    ])
  }, [branches, loading, dateRange, selectedParameter, selectedBranch, selectedFacility, parameters])

  // Handle date range change
  const handleDateRangeChange = (range: { from?: Date; to?: Date }) => {
    if (range.from && range.to) {
      setDateRange({ from: range.from, to: range.to })
    }
  }

  // Get parameter unit
  const getParameterUnit = (paramId: string): string => {
    const param = parameters.find((p) => p.id === paramId)
    return param ? param.unit : ""
  }

  // Get parameter name
  const getParameterName = (paramId: string): string => {
    const param = parameters.find((p) => p.id === paramId)
    return param ? param.name : paramId
  }

  return (
    <div className="container max-w-7xl mx-auto px-4 py-6 space-y-8">
      <div className="flex flex-col space-y-2">
        <h1 className="text-3xl font-bold tracking-tight">Analíticas</h1>
        <p className="text-muted-foreground">Análisis detallado de los datos recopilados por los sensores</p>
      </div>

      <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
        <div className="flex flex-col sm:flex-row gap-4">
          <LocationSelector
            branches={branches}
            onBranchChange={setSelectedBranch}
            onFacilityChange={setSelectedFacility}
          />
          <DateRangePicker dateRange={dateRange} onDateRangeChange={handleDateRangeChange} />
        </div>
        <Button variant="outline" className="flex items-center gap-2">
          <Filter className="h-4 w-4" />
          Filtros Avanzados
          <ChevronDown className="h-4 w-4" />
        </Button>
      </div>

      {/* Branch Status Section */}
      <Card className="shadow-lg border-blue-100 dark:border-blue-800">
        <CardHeader>
          <CardTitle className="flex items-center">
            <Building2 className="h-5 w-5 mr-2 text-blue-600 dark:text-blue-400" />
            Estado de Sucursales
          </CardTitle>
          <CardDescription>Distribución de sensores y alertas por sucursal</CardDescription>
        </CardHeader>
        <CardContent>
          <BranchStatusChart selectedBranchId={selectedBranch} />
        </CardContent>
      </Card>

      {/* Water Quality Section */}
      <Card className="shadow-lg border-blue-100 dark:border-blue-800">
        <CardHeader>
          <CardTitle className="flex items-center">
            <Thermometer className="h-5 w-5 mr-2 text-blue-600 dark:text-blue-400" />
            Calidad del Agua
          </CardTitle>
          <CardDescription>Resumen de los principales parámetros de calidad del agua</CardDescription>
        </CardHeader>
        <CardContent>
          <WaterQualityOverview selectedBranchId={selectedBranch} selectedFacilityId={selectedFacility} />
        </CardContent>
      </Card>

      <Tabs defaultValue="trends" className="w-full">
        <TabsList className="mb-4">
          <TabsTrigger value="trends" className="flex items-center gap-1">
            <LineChart className="h-4 w-4" />
            Tendencias
          </TabsTrigger>
          <TabsTrigger value="anomalies" className="flex items-center gap-1">
            <Activity className="h-4 w-4" />
            Anomalías
          </TabsTrigger>
          <TabsTrigger value="distribution" className="flex items-center gap-1">
            <PieChart className="h-4 w-4" />
            Distribución
          </TabsTrigger>
        </TabsList>

        <TabsContent value="trends" className="mt-0 space-y-6">
          <Card className="shadow-lg border-blue-100 dark:border-blue-800">
            <CardHeader>
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <LineChart className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                    Tendencias de Parámetros
                  </CardTitle>
                  <CardDescription>Evolución de los parámetros a lo largo del tiempo</CardDescription>
                </div>
                <div className="flex items-center gap-2">
                  <Select value={selectedParameter} onValueChange={setSelectedParameter}>
                    <SelectTrigger className="w-[180px]">
                      <SelectValue placeholder="Seleccionar parámetro" />
                    </SelectTrigger>
                    <SelectContent>
                      {parameters.map((param) => (
                        <SelectItem key={param.id} value={param.id}>
                          {param.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="h-[400px] w-full">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart
                    data={trendData}
                    margin={{
                      top: 10,
                      right: 30,
                      left: 0,
                      bottom: 0,
                    }}
                  >
                    <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
                    <XAxis dataKey="date" />
                    <YAxis />
                    <Tooltip
                      contentStyle={{
                        backgroundColor: "rgba(255, 255, 255, 0.9)",
                        borderRadius: "8px",
                        boxShadow: "0 4px 12px rgba(0, 0, 0, 0.1)",
                        border: "none",
                      }}
                      formatter={(value: number) => [
                        `${value.toFixed(2)}${getParameterUnit(selectedParameter)}`,
                        getParameterName(selectedParameter),
                      ]}
                    />
                    <Area
                      type="monotone"
                      dataKey={selectedParameter}
                      stroke={parameters.find((p) => p.id === selectedParameter)?.color || "#f44336"}
                      fill={`url(#color${selectedParameter.charAt(0).toUpperCase() + selectedParameter.slice(1)})`}
                      activeDot={{ r: 8 }}
                      name={getParameterName(selectedParameter)}
                    />
                    <defs>
                      <linearGradient
                        id={`color${selectedParameter.charAt(0).toUpperCase() + selectedParameter.slice(1)}`}
                        x1="0"
                        y1="0"
                        x2="0"
                        y2="1"
                      >
                        <stop
                          offset="5%"
                          stopColor={parameters.find((p) => p.id === selectedParameter)?.color || "#f44336"}
                          stopOpacity={0.8}
                        />
                        <stop
                          offset="95%"
                          stopColor={parameters.find((p) => p.id === selectedParameter)?.color || "#f44336"}
                          stopOpacity={0.1}
                        />
                      </linearGradient>
                    </defs>
                  </AreaChart>
                </ResponsiveContainer>
              </div>
            </CardContent>
          </Card>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Card className="shadow-lg border-blue-100 dark:border-blue-800">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <BarChart3 className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                  Comparativa Mensual
                </CardTitle>
                <CardDescription>Comparación de valores mensuales</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-[300px] w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart
                      data={trendData.filter((_, i) => i % 3 === 0)} // Show fewer bars for clarity
                      margin={{
                        top: 10,
                        right: 30,
                        left: 0,
                        bottom: 0,
                      }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
                      <XAxis dataKey="date" />
                      <YAxis />
                      <Tooltip
                        formatter={(value: number) => [
                          `${value.toFixed(2)}${getParameterUnit(selectedParameter)}`,
                          getParameterName(selectedParameter),
                        ]}
                      />
                      <Bar
                        dataKey={selectedParameter}
                        name={getParameterName(selectedParameter)}
                        fill={parameters.find((p) => p.id === selectedParameter)?.color || "#f44336"}
                      />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>

            <Card className="shadow-lg border-blue-100 dark:border-blue-800">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Waves className="h-5 w-5 text-blue-600 dark:text-blue-400" />
                  Correlación de Parámetros
                </CardTitle>
                <CardDescription>Relación entre diferentes parámetros</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="h-[300px] w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <RechartsLineChart
                      data={trendData}
                      margin={{
                        top: 10,
                        right: 30,
                        left: 0,
                        bottom: 0,
                      }}
                    >
                      <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
                      <XAxis dataKey="date" />
                      <YAxis yAxisId="left" orientation="left" />
                      <YAxis yAxisId="right" orientation="right" />
                      <Tooltip />
                      <Legend />
                      <Line
                        yAxisId="left"
                        type="monotone"
                        dataKey={selectedParameter}
                        name={`${getParameterName(selectedParameter)} (${getParameterUnit(selectedParameter)})`}
                        stroke={parameters.find((p) => p.id === selectedParameter)?.color || "#f44336"}
                        activeDot={{ r: 8 }}
                      />
                      <Line
                        yAxisId="right"
                        type="monotone"
                        dataKey={selectedParameter === "temperatura" ? "oxigeno" : "temperatura"}
                        name={`${getParameterName(selectedParameter === "temperatura" ? "oxigeno" : "temperatura")} (${getParameterUnit(selectedParameter === "temperatura" ? "oxigeno" : "temperatura")})`}
                        stroke={
                          parameters.find(
                            (p) => p.id === (selectedParameter === "temperatura" ? "oxigeno" : "temperatura"),
                          )?.color || "#2196f3"
                        }
                      />
                    </RechartsLineChart>
                  </ResponsiveContainer>
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        <TabsContent value="anomalies" className="mt-0 space-y-6">
          <Card className="shadow-lg border-blue-100 dark:border-blue-800">
            <CardHeader>
              <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
                <div>
                  <CardTitle className="flex items-center gap-2">
                    <Activity className="h-5 w-5 text-amber-600 dark:text-amber-400" />
                    Detección de Anomalías
                  </CardTitle>
                  <CardDescription>Identificación de valores fuera de los rangos normales</CardDescription>
                </div>
                <div className="flex items-center gap-2">
                  <Select value={selectedParameter} onValueChange={setSelectedParameter}>
                    <SelectTrigger className="w-[180px]">
                      <SelectValue placeholder="Seleccionar parámetro" />
                    </SelectTrigger>
                    <SelectContent>
                      {parameters.map((param) => (
                        <SelectItem key={param.id} value={param.id}>
                          {param.name}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
            </CardHeader>
            <CardContent>
              <div className="h-[400px] w-full">
                <ResponsiveContainer width="100%" height="100%">
                  <RechartsLineChart
                    data={anomalyData}
                    margin={{
                      top: 10,
                      right: 30,
                      left: 0,
                      bottom: 0,
                    }}
                  >
                    <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
                    <XAxis dataKey="date" />
                    <YAxis domain={["auto", "auto"]} />
                    <Tooltip
                      formatter={(value: number) => [
                        `${value.toFixed(2)}${getParameterUnit(selectedParameter)}`,
                        value === anomalyData[0]?.threshold ? "Umbral" : getParameterName(selectedParameter),
                      ]}
                    />
                    <Line
                      type="monotone"
                      dataKey="threshold"
                      name="Umbral"
                      stroke="#ff9800"
                      strokeDasharray="5 5"
                      dot={false}
                    />
                    <Line
                      type="monotone"
                      dataKey="value"
                      name={getParameterName(selectedParameter)}
                      stroke="#2196f3"
                      dot={(props) => {
                        const { cx, cy, payload } = props
                        if (payload.anomaly) {
                          return <circle cx={cx} cy={cy} r={6} fill="#f44336" stroke="#fff" strokeWidth={2} />
                        }
                        return <circle cx={cx} cy={cy} r={4} fill="#2196f3" stroke="#fff" strokeWidth={2} />
                      }}
                    />
                  </RechartsLineChart>
                </ResponsiveContainer>
              </div>
              <div className="mt-4 p-4 bg-amber-50 dark:bg-amber-950 rounded-md border border-amber-200 dark:border-amber-800">
                <h3 className="text-sm font-medium flex items-center gap-2 text-amber-800 dark:text-amber-300">
                  <AlertTriangle className="h-4 w-4" />
                  Anomalías Detectadas
                </h3>
                <p className="text-sm mt-1 text-amber-700 dark:text-amber-400">
                  Se detectaron {anomalyData.filter((d) => d.anomaly).length} valores anómalos de{" "}
                  {getParameterName(selectedParameter)} en el período seleccionado, superando el umbral establecido.
                </p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="distribution" className="mt-0 space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {parameters.slice(0, 6).map((param) => (
              <Card key={param.id} className="shadow-lg border-blue-100 dark:border-blue-800">
                <CardHeader>
                  <CardTitle className="text-base flex items-center gap-2">
                    <span className="h-3 w-3 rounded-full" style={{ backgroundColor: param.color }}></span>
                    {param.name}
                  </CardTitle>
                  <CardDescription>Distribución de valores</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="h-[200px] w-full">
                    <ResponsiveContainer width="100%" height="100%">
                      <RechartsPieChart>
                        <Pie
                          data={distributionData}
                          cx="50%"
                          cy="50%"
                          innerRadius={40}
                          outerRadius={80}
                          paddingAngle={5}
                          dataKey="value"
                        >
                          {distributionData.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={entry.color} />
                          ))}
                        </Pie>
                        <Tooltip />
                      </RechartsPieChart>
                    </ResponsiveContainer>
                  </div>
                  <div className="mt-4 grid grid-cols-3 gap-2 text-center text-sm">
                    {distributionData.map((entry) => (
                      <div key={entry.name} className="flex flex-col items-center">
                        <span className="h-3 w-3 rounded-full mb-1" style={{ backgroundColor: entry.color }}></span>
                        <span className="text-xs text-muted-foreground">{entry.name}</span>
                        <span className="font-medium">{entry.value}%</span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}
