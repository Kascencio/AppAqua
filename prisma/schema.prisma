generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model alertas {
  id_alertas          Int              @id @default(autoincrement())
  id_instalacion      Int
  id_sensor_instalado Int
  descripcion         String           @db.VarChar(100)
  dato_puntual        Decimal          @db.Decimal(10, 2)
  instalacion         instalacion      @relation(fields: [id_instalacion], references: [id_instalacion], onUpdate: Restrict, map: "alertas_ibfk_1")
  sensor_instalado    sensor_instalado @relation(fields: [id_sensor_instalado], references: [id_sensor_instalado], onUpdate: Restrict, map: "alertas_ibfk_2")

  @@index([id_instalacion], map: "id_instalacion")
  @@index([id_sensor_instalado], map: "id_sensor_instalado")
}

model asignacion_usuario {
  id_asignacion       Int               @id @default(autoincrement())
  id_usuario          Int
  id_empresa_sucursal Int?
  id_instalacion      Int?
  fecha_asignacion    DateTime          @default(now()) @db.DateTime(0)
  instalacion         instalacion?      @relation(fields: [id_instalacion], references: [id_instalacion], onDelete: Restrict, onUpdate: Restrict, map: "fk_au_instalacion")
  empresa_sucursal    empresa_sucursal? @relation(fields: [id_empresa_sucursal], references: [id_empresa_sucursal], onDelete: Restrict, onUpdate: Restrict, map: "fk_au_sucursal")
  usuario             usuario           @relation(fields: [id_usuario], references: [id_usuario], onUpdate: Restrict, map: "fk_au_usuario")

  @@unique([id_usuario, id_empresa_sucursal, id_instalacion], map: "uq_usuario_emp_inst")
  @@index([id_instalacion], map: "fk_au_instalacion")
  @@index([id_empresa_sucursal], map: "fk_au_sucursal")
}

model catalogo_sensores {
  id_sensor        Int                @id @default(autoincrement())
  modelo           String?            @db.VarChar(45)
  marca            String?            @db.VarChar(45)
  rango_medicion   String?            @db.VarChar(45)
  unidad_medida    String?            @db.VarChar(45)
  sensor           String             @db.VarChar(45)
  descripcion      String             @db.VarChar(500)
  sensor_instalado sensor_instalado[]
}

model codigos_postales {
  id_cp            Int                @id @default(autoincrement())
  id_municipio     Int
  codigo_postal    String             @db.VarChar(10)
  municipios       municipios         @relation(fields: [id_municipio], references: [id_municipio], onUpdate: Restrict, map: "codigos_postales_ibfk_1")
  colonias         colonias[]
  empresa_sucursal empresa_sucursal[]

  @@index([id_municipio], map: "id_municipio")
}

model colonias {
  id_colonia       Int                @id @default(autoincrement())
  id_cp            Int
  nombre_colonia   String             @db.VarChar(100)
  codigos_postales codigos_postales   @relation(fields: [id_cp], references: [id_cp], onUpdate: Restrict, map: "colonias_ibfk_1")
  empresa_sucursal empresa_sucursal[]

  @@index([id_cp], map: "id_cp")
}

model empresa_sucursal {
  id_empresa_sucursal    Int                               @id @default(autoincrement())
  id_padre               Int?
  nombre                 String                            @db.VarChar(100)
  tipo                   empresa_sucursal_tipo
  telefono               String?                           @db.VarChar(20)
  email                  String?                           @db.VarChar(100)
  estado_operativo       empresa_sucursal_estado_operativo
  fecha_registro         DateTime                          @db.Date
  id_estado              Int
  id_cp                  Int
  id_colonia             Int
  calle                  String                            @db.VarChar(100)
  numero_int_ext         String?                           @db.VarChar(10)
  referencia             String?                           @db.VarChar(100)
  asignacion_usuario     asignacion_usuario[]
  empresa_sucursal       empresa_sucursal?                 @relation("empresa_sucursalToempresa_sucursal", fields: [id_padre], references: [id_empresa_sucursal], onDelete: Restrict, onUpdate: Restrict, map: "empresa_sucursal_ibfk_1")
  other_empresa_sucursal empresa_sucursal[]                @relation("empresa_sucursalToempresa_sucursal")
  estados                estados                           @relation(fields: [id_estado], references: [id_estado], onUpdate: Restrict, map: "empresa_sucursal_ibfk_2")
  codigos_postales       codigos_postales                  @relation(fields: [id_cp], references: [id_cp], onUpdate: Restrict, map: "empresa_sucursal_ibfk_3")
  colonias               colonias                          @relation(fields: [id_colonia], references: [id_colonia], onUpdate: Restrict, map: "empresa_sucursal_ibfk_4")
  instalacion            instalacion[]

  @@index([id_colonia], map: "id_colonia")
  @@index([id_cp], map: "id_cp")
  @@index([id_estado], map: "id_estado")
  @@index([id_padre], map: "id_padre")
}

model especie_parametro {
  id_especie_parametro Int        @id @default(autoincrement())
  id_especie           Int
  id_parametro         Int
  Rmax                 Float      @db.Float
  Rmin                 Float      @db.Float
  especies             especies   @relation(fields: [id_especie], references: [id_especie], onUpdate: Restrict, map: "especie_parametro_ibfk_1")
  parametros           parametros @relation(fields: [id_parametro], references: [id_parametro], onUpdate: Restrict, map: "especie_parametro_ibfk_2")

  @@index([id_especie], map: "id_especie")
  @@index([id_parametro], map: "id_parametro")
}

model especies {
  id_especie        Int                 @id @default(autoincrement())
  nombre            String              @db.VarChar(100)
  especie_parametro especie_parametro[]
  procesos          procesos[]
}

model estados {
  id_estado        Int                @id @default(autoincrement())
  nombre_estado    String             @db.VarChar(45)
  empresa_sucursal empresa_sucursal[]
  municipios       municipios[]
}

model instalacion {
  id_instalacion      Int                          @id @default(autoincrement())
  id_empresa_sucursal Int
  nombre_instalacion  String                       @db.VarChar(100)
  fecha_instalacion   DateTime                     @db.Date
  estado_operativo    instalacion_estado_operativo
  descripcion         String                       @db.VarChar(200)
  tipo_uso            instalacion_tipo_uso
  id_proceso          Int
  alertas             alertas[]
  asignacion_usuario  asignacion_usuario[]
  empresa_sucursal    empresa_sucursal             @relation(fields: [id_empresa_sucursal], references: [id_empresa_sucursal], onUpdate: Restrict, map: "instalacion_ibfk_1")
  procesos            procesos                     @relation(fields: [id_proceso], references: [id_proceso], onUpdate: Restrict, map: "instalacion_ibfk_2")
  sensor_instalado    sensor_instalado[]

  @@index([id_empresa_sucursal], map: "id_empresa_sucursal")
  @@index([id_proceso], map: "id_proceso")
}

model lectura {
  id_lectura                                                     Int                @id @default(autoincrement())
  id_sensor_instalado                                            Int
  valor                                                          Decimal            @db.Decimal(10, 2)
  fecha                                                          DateTime           @db.Date
  hora                                                           DateTime           @db.Time(0)
  sensor_instalado_lectura_id_sensor_instaladoTosensor_instalado sensor_instalado   @relation("lectura_id_sensor_instaladoTosensor_instalado", fields: [id_sensor_instalado], references: [id_sensor_instalado], onUpdate: Restrict, map: "lectura_ibfk_1")
  sensor_instalado_sensor_instalado_id_lecturaTolectura          sensor_instalado[] @relation("sensor_instalado_id_lecturaTolectura")

  @@index([id_sensor_instalado], map: "id_sensor_instalado")
  @@index([fecha], map: "idx_lectura_fecha")
  @@index([id_sensor_instalado], map: "idx_lectura_id_sensor_instalado")
  @@index([id_sensor_instalado, fecha], map: "idx_lectura_sensor_fecha")
}

model municipios {
  id_municipio     Int                @id @default(autoincrement())
  id_estado        Int
  nombre_municipio String             @db.VarChar(45)
  codigos_postales codigos_postales[]
  estados          estados            @relation(fields: [id_estado], references: [id_estado], onUpdate: Restrict, map: "municipios_ibfk_1")

  @@index([id_estado], map: "id_estado")
}

model parametros {
  id_parametro      Int                 @id @default(autoincrement())
  nombre_parametro  String?             @db.VarChar(100)
  unidad_medida     String?             @db.VarChar(100)
  especie_parametro especie_parametro[]
}

model procesos {
  id_proceso   Int           @id @default(autoincrement())
  id_especie   Int
  fecha_inicio DateTime      @db.Date
  fecha_final  DateTime      @db.Date
  instalacion  instalacion[]
  especies     especies      @relation(fields: [id_especie], references: [id_especie], onUpdate: Restrict, map: "procesos_ibfk_1")

  @@index([id_especie], map: "id_especie")
}

model promedio {
  pk_promedio         Int              @id @default(autoincrement())
  id_sensor_instalado Int
  fecha               DateTime         @db.Date
  hora                DateTime         @db.Time(0)
  promedio            Decimal          @db.Decimal(10, 2)
  sensor_instalado    sensor_instalado @relation(fields: [id_sensor_instalado], references: [id_sensor_instalado], onUpdate: Restrict, map: "promedio_ibfk_1")

  @@unique([id_sensor_instalado, fecha, hora], map: "uq_sensor_fecha_hora")
}

model resumen_lectura_horaria {
  id_resumen          Int              @id @default(autoincrement())
  id_sensor_instalado Int
  fecha               DateTime         @db.Date
  hora                DateTime         @db.Time(0)
  promedio            Decimal          @db.Decimal(10, 2)
  registros           Int              @default(0)
  sensor_instalado    sensor_instalado @relation(fields: [id_sensor_instalado], references: [id_sensor_instalado], onUpdate: Restrict, map: "resumen_lectura_horaria_ibfk_1")

  @@unique([id_sensor_instalado, fecha, hora], map: "uq_sensor_fecha_hora")
}

model sensor_instalado {
  id_sensor_instalado                                   Int                       @id @default(autoincrement())
  id_instalacion                                        Int
  id_sensor                                             Int
  fecha_instalada                                       DateTime                  @db.Date
  descripcion                                           String                    @db.VarChar(50)
  id_lectura                                            Int?
  alertas                                               alertas[]
  lectura_lectura_id_sensor_instaladoTosensor_instalado lectura[]                 @relation("lectura_id_sensor_instaladoTosensor_instalado")
  promedio                                              promedio[]
  resumen_lectura_horaria                               resumen_lectura_horaria[]
  instalacion                                           instalacion               @relation(fields: [id_instalacion], references: [id_instalacion], onUpdate: Restrict, map: "sensor_instalado_ibfk_1")
  catalogo_sensores                                     catalogo_sensores         @relation(fields: [id_sensor], references: [id_sensor], onUpdate: Restrict, map: "sensor_instalado_ibfk_2")
  lectura_sensor_instalado_id_lecturaTolectura          lectura?                  @relation("sensor_instalado_id_lecturaTolectura", fields: [id_lectura], references: [id_lectura], onDelete: Restrict, onUpdate: Restrict, map: "sensor_instalado_ibfk_3")

  @@index([id_instalacion], map: "id_instalacion")
  @@index([id_lectura], map: "id_lectura")
  @@index([id_sensor], map: "id_sensor")
}

model tipo_rol {
  id_rol  Int       @id @default(autoincrement())
  nombre  String    @unique(map: "uq_nombre_rol") @db.VarChar(50)
  usuario usuario[]
}

model token_recuperacion {
  id_token   Int      @id @default(autoincrement())
  id_usuario Int
  token      String   @unique(map: "uq_token") @db.Char(64)
  expiracion DateTime @db.DateTime(0)
  usuario    usuario  @relation(fields: [id_usuario], references: [id_usuario], onUpdate: Restrict, map: "fk_tr_usuario")

  @@index([id_usuario], map: "fk_tr_usuario")
}

model usuario {
  id_usuario         Int                  @id @default(autoincrement())
  id_rol             Int
  nombre_completo    String               @db.VarChar(100)
  correo             String               @unique(map: "uq_usuario_correo") @db.VarChar(100)
  telefono           String?              @db.VarChar(20)
  password_hash      String               @db.Char(60)
  estado             usuario_estado       @default(activo)
  fecha_creacion     DateTime             @default(now()) @db.DateTime(0)
  asignacion_usuario asignacion_usuario[]
  token_recuperacion token_recuperacion[]
  tipo_rol           tipo_rol             @relation(fields: [id_rol], references: [id_rol], onUpdate: Restrict, map: "fk_usuario_rol")

  @@index([id_rol], map: "fk_usuario_rol")
}

enum empresa_sucursal_tipo {
  empresa
  sucursal
}

enum instalacion_estado_operativo {
  activo
  inactivo
}

enum empresa_sucursal_estado_operativo {
  activa
  inactiva
}

enum instalacion_tipo_uso {
  acuicultura
  tratamiento
  otros
}

enum usuario_estado {
  activo
  inactivo
}
